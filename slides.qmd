---
title: "Quarto Revealjs Customization"
author: "Author's Name"
date: "`r Sys.Date()`"
format: 
  revealjs:
    #theme: sky
    highlight: pygments
    #center: true
    slide-level: 3
    slide-number: c/t
    include-before-body: styles.html
    css: styles.css
    include-after-body: jave-script.html
  
editor: visual
---

### Slide Title One

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

### Slide Title Two

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

### Slide Title Three

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
 print( 1 + 3)
```

### Slide Title Four

```{r}
library(tidyverse)
library(plotly)
library(gapminder)

mtcars |> 
  ggplot(aes(mpg, wt)) + geom_point()
```

### Custom slide power point

::: columns
::: {.column width="50%"}
```{=html}
<div class="text-box" style="height:200px">
  <h4>Process Title</h4>
  <h5>Detailed explanation</h5>
  <p>List the main bullet-point explanations for the diagram.</p>
</div>
```
:::

::: {.column width="50%"}
```{mermaid}
flowchart TB
  A[Start] --> B{Decision}
  B -->|Yes| C[Action 1]
  B -->|No| D[Action 2]
  C -->|Yes| E{Result}
```
:::
:::

## Data Analysis Slide

::: panel-tabset
## Graph

```{r}
mpg |> 
  ggplot(aes(displ, hwy, color = class)) + geom_point() +
  geom_smooth(method = lm, se = FALSE) + facet_wrap(~class) +
  theme(legend.position = 'none')
```

## Summary Table

```{r}
library(gt)
mpg |> 
  group_by(class) |> 
  summarise(Average_disp = mean(displ),
            Standard_deviation = sd(displ)) |> 
  gt(id = 'two')
```

## Data

```{r}
head(mpg)
```
:::

## Another title for playing with data with icons

✅ This part was added to playing with git functionality.

🔍 Including functions that are necessary for both fetching from remote and local.

📈 it will be the last-fetched one.

📉 The added slides should be colored.

⚖️ One last time.

## Adding the Interactive Visualization

```{r}

gapminder_one <- gapminder |> 
  filter(year == 2007) |> 
  mutate(gdpPercap = log(gdpPercap)) 
  

plot_ly(gapminder_one, 
        y = ~lifeExp, 
        x = ~gdpPercap, 
        size = ~pop, 
        color = ~continent) |> 
  add_markers() |> 
  layout(
    title = "Life Expectancy vs GDP per Capita",
    xaxis = list(title = "GDP per Capita"),
    yaxis = list(title = "Life Expectancy")
  )

```

## 📈 Macroeconomic indicators

```{r}
economics |> 
  mutate(unemrate = unemploy/pop) |> 
  pivot_longer(cols = c(unemrate, psavert, pce), names_to = "indicator",
               values_to = "values") |> 
  ggplot(aes(date, values, color = indicator)) +
  geom_line() + facet_wrap(~indicator, scales = "free_y") +
  scale_x_date() + theme_minimal()
  
```

## Modified Presentation for more appealing text

-   This text is also used for self check.

-   The foundations of appealing presentation is to use more infographichs.

    ```{r}
    #| fig-height: 3.5
    #| fig-width: 10

    mpg |> 
      mutate(year = as.factor(year)) |> 
      ggplot(aes(displ, hwy, color = year)) + geom_point()

    ```

## 

::: r-stack
::: thank-you-slide
<h1 class="thank-you-heading">

Thank You!

</h1>

<h2 class="questions-prompt">

Any Questions?

</h2>

::: animated-text
:::
:::
:::
